3.implement linear queue and implement the following functions:
• Insert
• Remove
• Isfull
• Isempty
Write a main function to make the implementation a “Menu-Driven”.
#include <iostream>
using namespace std;
int queue[100], n = 100, front = - 1, rear = - 1;
void Insert() {
 int data;
 if (rear == n - 1)
 cout<<"Queue Overflow"<<endl;
 else
 {
 if (front == - 1)
 front =0;
 cout<<"Insert the element : "<<endl;
 cin>>data;
rear++;
 queue[rear] = data;
 }
}
void Delete() {
 if (front == - 1 || front > rear)
{
 cout<<"Queue Underflow ";
 return ;
 }
else
{
 cout<<"Element deleted from queue is : "<< queue[front] <<endl;
 front++;
 }
}
void Display() {
 if (front == - 1)
 cout<<"Queue is empty"<<endl;
 else
 {
 cout<<"Queue elements are : ";
 for (int i = front; i <= rear; i++)
 cout<<queue[i]<<" ";
 cout<<endl;
 }
}
void isempty()
{
if (front == - 1 || front > rear)
{
 cout<<"Queue Underflow ";
 return ;
 }
 else
 {
 while(front!=rear)
 {
 front++;
}
cout<<"Queue is empty"<<endl;
}
}
void isfull()
{
if (front == - 1 || front > rear)
{
 cout<<"Queue Underflow ";
 return ;
 }
 else
 {
 while(rear!=n-1)
 {
 rear++;
}
cout<<"Queue is full"<<endl;
}
}
int main() {
 int ch;
do {
 cout<<"Enter your choice : ";
 cin>>ch;
 switch (ch)
 {
 case 1: Insert();
 break;
 case 2: Delete();
 break;
 case 3: Display();
 break;
 case 4: isfull();
 break;
 case 5: isempty();
 break;
 case 6:
 cout<<"Exit"<<endl;
 break;
 default: cout<<"Invalid choice"<<endl;
 break;
 }
} while(ch!=6);
 return 0;
}
