2.Implement stack using Linked List and perform the following operations:
• Push(x)
• Pop()
• IsFull()
• IsEmpty()
• Peek(position)
#include<iostream>
using namespace std;
struct stack
{
int data;
stack *next;
};
struct stack* top=NULL;
void push()
{
stack *temp=new stack();
cout<<"Enter data: ";
cin>>temp->data;
temp->next=top;
top=temp;
}
void pop()
{
if(top==NULL)
{
cout<<"The stack is empty"<<endl;
}
else
{
cout<<"The data poped is: "<<top->data<<endl;
top=top->next;
}
}
void display()
{
stack *temp=top;
if(top==NULL)
{
cout<<"The stack is empty"<<endl;
}
else
{
while(temp!=NULL)
{
cout<<temp->data<<" ";
temp=temp->next;
}
cout<<endl;
}
}
void emptyornot()
{
if(top==NULL)
{
cout<<"The stack is Empty"<<endl;
}
else
cout<<"The stack is not Empty"<<endl;
}
void fullornot()
{
if(top==NULL)
{
cout<<"The stack is Empty"<<endl;
}
else
{
stack *temp=top;
while(temp!=NULL)
{
temp=temp->next;
}
cout<<"The end of stack reached "<<endl;
}
}
void peekposition()
{
int n,count;
cout<<"Enter the index of the data: ";
cin>>n;
stack *temp=top;
while(temp!=NULL)
{
count++;
if(count==n)
{
cout<<"The data on given index is: ";
cout<<temp->data;
cout<<endl;
break;
}
temp=temp->next;
}
}
int main()
{
char ch;
do
{
cout<<"Enter Your choice: ";
cin>>ch;
switch(ch)
{
case 'p':
push();
break;
case 'o':
pop();
break;
case 'd':
display();
break;
case 'e':
emptyornot();
break;
case 'f':
fullornot();
break;
case 'k':
peekposition();
break;
case '6':
cout<<"Exit ";
break;
default:
cout<<"Invalid input";
break;
}
}while(ch!='6');
return 0;
}
